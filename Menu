
import java.util.Scanner;
public class Menu {
	private LinkedBinarySearchTree<Integer> bst;
	public Menu(LinkedBinarySearchTree<Integer> bst) {
		this.bst = bst;
	}

	public void mainMenu(){
		System.out.println("Please input a integer number 0-5:");
		System.out.println(" 1: Insert a node.");
		System.out.println(" 2: Delete a node.");
		System.out.println(" 3: Search a node.");
		System.out.println(" 4: Display BST.");
		System.out.println(" 0: Exit.");

		Scanner scanner = new Scanner(System.in);
		
		while(scanner.hasNext()){
			if (scanner.hasNextInt()){
				switch (scanner.nextInt()){
				case 0:
					System.out.println("Exit system!");
					return;
				case 1:
					System.out.println("Insert a new node.");
					insertMenu();
					break;
				case 2:
					System.out.println("Delete a node.");
					deleteMenu();
					break;
				case 3:
					System.out.println("Search a node.");
					searchMenu();
					break;
				case 4:
					System.out.println("BST display:");
					bst.display();
					break;
				default:
					System.out.println("Invalid input, try again!");
					scanner.next();
					break;
				}
				System.out.println("\nPlease input a integer number 0-5:");
				System.out.println(" 1: Insert a new node.");
				System.out.println(" 2: Delete a node.");
				System.out.println(" 3: Search a node.");
				System.out.println(" 4: Display BST.");
				System.out.println(" 0: Exit.");
			}
			else{
				System.out.println("Invalid input, try again!");
				scanner.next();
			}
		}
	}

	public void insertMenu(){
		Scanner scanner = new Scanner(System.in);
		System.out.println("Please input a node (positive integer number) to be inserted (input <= 0: return to Main Menu):");
		while(scanner.hasNext())
		{
			if (scanner.hasNextInt()){
				int num = scanner.nextInt();
				if(num <= 0)
					break;
				if (bst.insertNode(num) == null)
					System.out.println("Failed to insert a new node, try again!");
				else
					bst.printTreeGraph();
				System.out.println("\n");
				System.out.println("Please input a node (positive integer number) to be inserted (input <= 0: return to Main Menu):");
			}
			else{
				System.out.println("Invalid input, try again!");
				scanner.next();
			}
		}
	}

	public void searchMenu(){
		System.out.println("Please input a node (positive integer number) to be searched (input <= 0: return to Main Menu):");
		Scanner scanner = new Scanner(System.in);
		while(scanner.hasNext()){
			if (scanner.hasNextInt()){
				int num = scanner.nextInt();
				if(num <= 0)
					break;
				if (bst.searchNode(num) == null)
					System.out.println("Can not find this node, try again!");
				else{
					System.out.println("Found it!");
					bst.printTreeGraph();
				}
				System.out.println("\n");
				System.out.println("Please input a node (positive integer number) to be searched (input <= 0: return to Main Menu):");
			}
			else{
				System.out.println("Invalid input, try again!");
				scanner.next();
			}
		}
	}

	public void deleteMenu(){
		System.out.println("Please input a node (positive integer number) to be deleted (input <= 0: return to Main Menu):");
		Scanner scanner = new Scanner(System.in);
		while(scanner.hasNext())
		{
			if (scanner.hasNextInt()){
				int num = scanner.nextInt();
				if(num <= 0)
					break;
				if (bst.deleteNode(num) == null)
					System.out.println("Failed to delete this node, try again!");
				else
					bst.printTreeGraph();
				System.out.println("\n");
				System.out.println("Please input a node (positive integer number) to be deleted (input <= 0: return to Main Menu):");
			}
			else{
				System.out.println("Invalid input, try again!");
				scanner.next();
			}
		}
	}
}
